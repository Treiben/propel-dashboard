@Ui_Api_HostAddress_Https = https://localhost:7113
@Ui_Api_HostAddress_Http = http://localhost:5038
@Ui_Api_HostAddress_Docker = http://localhost:5003

### Variables
@baseUrl = {{Ui_Api_HostAddress_Docker}}/api
@testFlagKey = test-flag-4851245
@testUserId = user-{{$randomInt}}

### Authentication Tokens
@api_jwt = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFwaVNjb3BlVXNlciIsInN1YiI6IkFwaVNjb3BlVXNlciIsImp0aSI6IjNhZWVjZWRlIiwic2NvcGUiOiJmZWF0dXJldG9nZ2xlc21hbmFnZW1lbnRhcGkiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo1MDM4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzExMyJdLCJuYmYiOjE3NTM1MDAyNjEsImV4cCI6MTc2MTQ0OTA2MSwiaWF0IjoxNzUzNTAwMjYyLCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0.r1u7xaYjgAFoVsx6ddDJLtXIuYWlyUHAQC7UZkjojIw
@readonly_jwt =  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IlJlYWRVc2VyIiwic3ViIjoiUmVhZFVzZXIiLCJqdGkiOiI2MTczNDRlIiwic2NvcGUiOlsiZmVhdHVyZXRvZ2dsZXNtYW5hZ2VtZW50YXBpIiwicmVhZCJdLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo1MDM4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzExMyJdLCJuYmYiOjE3NTM1MDAzNDgsImV4cCI6MTc2MTQ0OTE0OCwiaWF0IjoxNzUzNTAwMzQ5LCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0.YiW9_-swA8YXVaukSsKiZg-us_3YW0QCGwMtWb-HB4M
@full_access_jwt = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IldyaXRlVXNlciIsInN1YiI6IldyaXRlVXNlciIsImp0aSI6IjkyZjZhNzNmIiwic2NvcGUiOlsiZmVhdHVyZXRvZ2dsZXNtYW5hZ2VtZW50YXBpIiwicmVhZCIsIndyaXRlIl0sImF1ZCI6WyJodHRwOi8vbG9jYWxob3N0OjUwMzgiLCJodHRwczovL2xvY2FsaG9zdDo3MTEzIl0sIm5iZiI6MTc1MzUwMDM3NCwiZXhwIjoxNzYxNDQ5MTc0LCJpYXQiOjE3NTM1MDAzNzQsImlzcyI6ImRvdG5ldC11c2VyLWp3dHMifQ.7_mWTTJ_Jbq1I6Kg65ulyEjTP5mb6VEfhJH1w3iOF0o

@active_token = {{full_access_jwt}}

###
### 1. Update Feature Flag - Full Update
# Test: Update all modifiable properties of a feature flag using new DTO structure
# Expected: 200 OK with updated FeatureFlagDto reflecting all changes
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "name": "Updated Test Feature Flag",
  "description": "Updated description for testing",
  "expirationDate": "{{$datetime iso8601 30 d}}",
  "targetingRules": [
    {
      "attribute": "department",
      "operator": "In",
      "values": ["engineering", "qa"],
      "variation": "on"
    }
  ],
  "allowedUsers": ["{{testUserId}}", "test-user-123"],
  "blockedUsers": ["disabled-user-1"],
  "variations": {
    "on": true,
    "off": false,
    "beta": "beta-value"
  },
  "defaultVariation": "off",
  "tags": {
    "environment": "test",
    "team": "platform",
    "version": "v2"
  },
  "isPermanent": false
}

###
### 2. Update Feature Flag - Partial Update
# Test: Update only specific properties (name and description)
# Expected: 200 OK with FeatureFlagDto showing only specified changes
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "name": "Partially Updated Flag",
  "description": "Only name and description updated"
}

###
### 3. Update Feature Flag - User Lists Only
# Test: Update only user targeting lists
# Expected: 200 OK with updated user lists
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "enabledUsers": ["user-1", "user-2"],
  "disabledUsers": ["user-3", "user-4"]
}

###
### 4. Update Feature Flag - Variations and Default
# Test: Update variations and default variation
# Expected: 200 OK with updated variations
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "variations": {
    "control": false,
    "treatment": true,
    "experimental": "new-feature"
  },
  "defaultVariation": "control"
}

###
### 5. Update Feature Flag - Validation Error (Name Too Long)
# Test: Verify validation fails for name exceeding 200 characters
# Expected: 400 Bad Request with validation problem details
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "name": "This is a very long name that exceeds the maximum allowed length of 200 characters. This string is intentionally made very long to test the validation rule that prevents names from being too long. It should definitely exceed the 200 character limit and trigger a validation error in the API endpoint."
}

###
### 6. Update Feature Flag - Validation Error (Description Too Long)
# Test: Verify validation fails for description exceeding 1000 characters
# Expected: 400 Bad Request with validation problem details
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "description": "This is an extremely long description that is designed to exceed the maximum allowed length of 1000 characters for feature flag descriptions. The purpose of this test is to verify that our validation logic correctly identifies and rejects descriptions that are too long. This description will continue to be padded with additional text to ensure it surpasses the 1000 character threshold. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. This should now definitely exceed 1000 characters."
}

###
### 7. Update Feature Flag - Validation Error (Past Expiration Date)
# Test: Verify validation fails for expiration date in the past
# Expected: 400 Bad Request with validation problem details
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "expirationDate": "{{$datetime iso8601 -1 d}}"
}

###
### 8. Update Feature Flag - Business Validation Error (Overlapping Users)
# Test: Verify business validation fails when users appear in both enabled and disabled lists
# Expected: 400 Bad Request with business validation error
PUT {{baseUrl}}/feature-flags/{{testFlagKey}}
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "explicitlyAllowedUsers": ["user-1", "user-2", "overlap-user"],
  "explicitlyBlockedUsers": ["user-3", "overlap-user", "user-4"]
}

###
### 9. Update Feature Flag - Nonexistent Flag
# Test: Attempt to update a flag that doesn't exist
# Expected: 404 Not Found
PUT {{baseUrl}}/feature-flags/nonexistent-flag-key
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "name": "This flag doesn't exist"
}