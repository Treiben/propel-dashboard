@Ui_Api_HostAddress_Https = https://localhost:7113
@Ui_Api_HostAddress_Http = http://localhost:5038
@Ui_Api_HostAddress_Docker = http://localhost:5003

### Variables
@baseUrl = {{Ui_Api_HostAddress_Docker}}/api
@testFlagKey = test-flag-4851245
@testUserId = user-{{$randomInt}}

### Authentication Tokens
@api_jwt = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFwaVNjb3BlVXNlciIsInN1YiI6IkFwaVNjb3BlVXNlciIsImp0aSI6IjNhZWVjZWRlIiwic2NvcGUiOiJmZWF0dXJldG9nZ2xlc21hbmFnZW1lbnRhcGkiLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo1MDM4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzExMyJdLCJuYmYiOjE3NTM1MDAyNjEsImV4cCI6MTc2MTQ0OTA2MSwiaWF0IjoxNzUzNTAwMjYyLCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0.r1u7xaYjgAFoVsx6ddDJLtXIuYWlyUHAQC7UZkjojIw
@readonly_jwt =  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IlJlYWRVc2VyIiwic3ViIjoiUmVhZFVzZXIiLCJqdGkiOiI2MTczNDRlIiwic2NvcGUiOlsiZmVhdHVyZXRvZ2dsZXNtYW5hZ2VtZW50YXBpIiwicmVhZCJdLCJhdWQiOlsiaHR0cDovL2xvY2FsaG9zdDo1MDM4IiwiaHR0cHM6Ly9sb2NhbGhvc3Q6NzExMyJdLCJuYmYiOjE3NTM1MDAzNDgsImV4cCI6MTc2MTQ0OTE0OCwiaWF0IjoxNzUzNTAwMzQ5LCJpc3MiOiJkb3RuZXQtdXNlci1qd3RzIn0.YiW9_-swA8YXVaukSsKiZg-us_3YW0QCGwMtWb-HB4M
@full_access_jwt = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IldyaXRlVXNlciIsInN1YiI6IldyaXRlVXNlciIsImp0aSI6IjkyZjZhNzNmIiwic2NvcGUiOlsiZmVhdHVyZXRvZ2dsZXNtYW5hZ2VtZW50YXBpIiwicmVhZCIsIndyaXRlIl0sImF1ZCI6WyJodHRwOi8vbG9jYWxob3N0OjUwMzgiLCJodHRwczovL2xvY2FsaG9zdDo3MTEzIl0sIm5iZiI6MTc1MzUwMDM3NCwiZXhwIjoxNzYxNDQ5MTc0LCJpYXQiOjE3NTM1MDAzNzQsImlzcyI6ImRvdG5ldC11c2VyLWp3dHMifQ.7_mWTTJ_Jbq1I6Kg65ulyEjTP5mb6VEfhJH1w3iOF0o

@active_token = {{full_access_jwt}}

###
### ================== SETUP TEST DATA FOR PAGING/FILTERING ==================

### Setup 1. Create Test Flags for Paging Tests
# Test: Create multiple flags for pagination testing
# Expected: 201 Created - Environment Production Flag
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "env-prod-flag-{{$randomInt}}",
  "name": "Production Environment Flag",
  "description": "Flag for production environment",
  "status": "Enabled",
  "tags": {
    "environment": "production",
    "team": "backend",
    "priority": "high"
  },
  "isPermanent": false
}

###
### Setup 2. Create Second Test Flag
# Test: Create second flag with different tags and status
# Expected: 201 Created - Environment Staging Flag
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "env-staging-flag-{{$randomInt}}",
  "name": "Staging Environment Flag",
  "description": "Flag for staging environment",
  "status": "Disabled",
  "tags": {
    "environment": "staging",
    "team": "frontend",
    "priority": "medium"
  },
  "isPermanent": false
}

###
### Setup 3. Create Third Test Flag
# Test: Create third flag for comprehensive testing
# Expected: 201 Created - Development Flag
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "env-dev-flag-{{$randomInt}}",
  "name": "Development Environment Flag",
  "description": "Flag for development environment",
  "status": "Percentage",
  "percentageEnabled": 50,
  "tags": {
    "environment": "development",
    "team": "backend",
    "priority": "low"
  },
  "isPermanent": false
}

###
### Setup 4. Create Fourth Test Flag
# Test: Create flag without environment tag
# Expected: 201 Created - Feature Flag without environment
POST {{baseUrl}}/feature-flags
Content-Type: application/json
Authorization: Bearer {{active_token}}

{
  "key": "feature-experimental-{{$randomInt}}",
  "name": "Experimental Feature Flag",
  "description": "Experimental feature flag",
  "status": "Scheduled",
  "tags": {
    "type": "experimental",
    "team": "research",
    "priority": "high"
  },
  "isPermanent": false
}

###
### ================== PAGING TESTS ==================

### Get All Flags
# Test: Get all flags
# Expected: 200 OK with all flags
GET {{baseUrl}}/feature-flags/all
Authorization: Bearer {{active_token}}

### Paging 1. Get First Page - Default Parameters
# Test: Get first page with default page size (10)
# Expected: 200 OK with PagedFeatureFlagsResponse, page=1, pageSize=10
GET {{baseUrl}}/feature-flags/
Authorization: Bearer {{active_token}}

###
### Paging 2. Get First Page - Custom Page Size
# Test: Get first page with custom page size
# Expected: 200 OK with PagedFeatureFlagsResponse, page=1, pageSize=5
GET {{baseUrl}}/feature-flags?page=1&pageSize=5
Authorization: Bearer {{active_token}}

###
### Paging 3. Get Second Page
# Test: Get second page to verify pagination works
# Expected: 200 OK with PagedFeatureFlagsResponse, page=2, pageSize=5
GET {{baseUrl}}/feature-flags?page=2&pageSize=5
Authorization: Bearer {{active_token}}

###
### Paging 4. Test Page Size Limit
# Test: Verify page size is limited to maximum allowed
# Expected: 400 Bad: pageSize should be capped at 100
GET {{baseUrl}}/feature-flags?page=1&pageSize=150
Authorization: Bearer {{active_token}}

###
### Paging 5. Test Invalid Page Number (0)
# Test: Verify page number validation (should default to 1)
# Expected: 400 Bad Request with validation error OR 200 OK with page defaulted to 1
GET {{baseUrl}}/feature-flags?page=0&pageSize=10
Authorization: Bearer {{active_token}}

###
### Paging 6. Test Invalid Page Number (Negative)
# Test: Verify negative page number validation
# Expected: 400 Bad Request with validation error
GET {{baseUrl}}/feature-flags?page=-1&pageSize=10
Authorization: Bearer {{active_token}}

###
### Paging 7. Test Invalid Page Size (0)
# Test: Verify page size validation
# Expected: 400 Bad Request with validation error
GET {{baseUrl}}/feature-flags?page=1&pageSize=0
Authorization: Bearer {{active_token}}

###
### Paging 8. Test Invalid Page Size (Negative)
# Test: Verify negative page size validation
# Expected: 400 Bad Request with validation error
GET {{baseUrl}}/feature-flags?page=1&pageSize=-5
Authorization: Bearer {{active_token}}# For more info on HTTP files go to https://aka.ms/vs/httpfile
